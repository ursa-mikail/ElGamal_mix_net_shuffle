package main

import (
	"fmt"

	"go.dedis.ch/kyber/v3"
	"go.dedis.ch/kyber/v3/group/edwards25519"
	"go.dedis.ch/kyber/v3/proof"
	"go.dedis.ch/kyber/v3/shuffle"
)

func main() {
	n := 52 // Shuffle 52 numbers

	suite := edwards25519.NewBlakeSHA256Ed25519()
	rand := suite.RandomStream()

	// Server ElGamal keypair (h, H)
	h := suite.Scalar().Pick(rand)
	H := suite.Point().Mul(h, nil)

	// Create 52 numbers as points (0 to 51)
	values := make([]kyber.Point, n)
	for i := 0; i < n; i++ {
		scalar := suite.Scalar().SetInt64(int64(i))
		values[i] = suite.Point().Mul(scalar, nil) // Use scalar * G as point
	}

	// Encrypt each value using ElGamal with server public key H
	X := make([]kyber.Point, n) // ephemeral public key
	Y := make([]kyber.Point, n) // message ciphertext
	for i := 0; i < n; i++ {
		r := suite.Scalar().Pick(rand)
		X[i] = suite.Point().Mul(r, nil) // r * G
		Y[i] = suite.Point().Mul(r, H)   // r * H
		Y[i].Add(Y[i], values[i])        // rH + M
	}

	// Shuffle and prove
	Xbar, Ybar, prover := shuffle.Shuffle(suite, nil, H, X, Y, rand)
	proofBytes, err := proof.HashProve(suite, "PairShuffle", prover)
	if err != nil {
		panic("Failed to generate shuffle proof: " + err.Error())
	}

	// Verify proof
	verifier := shuffle.Verifier(suite, nil, H, X, Y, Xbar, Ybar)
	err = proof.HashVerify(suite, "PairShuffle", verifier, proofBytes)
	if err != nil {
		fmt.Println("❌ Shuffle verification failed:", err)
	} else {
		fmt.Println("✅ Shuffle verified!")
	}

	// Print a subset of shuffled results
	fmt.Println("\nShuffled indices (Xbar):")
	for i := 0; i < n; i++ {
		fmt.Printf("Xbar[%d]: %s\n", i, Xbar[i].String())
	}
}

/*
% go mod tidy
% go run main.go
✅ Shuffle verified!

Shuffled indices (Xbar):
Xbar[0]: c71ce3c8a97e53ea20fbddea7b71e61c7a6eb3c477b67882300e2374b5e14426
Xbar[1]: c433f59fa6964be058f51ba44ff10645e5fdbba356ab040de22ade216d591f93
:
Xbar[50]: 311e2cac63d84a8596172dbe6818143c105e51e04021d082d127b5247b058921
Xbar[51]: beffec8ce278e5c27d0fd4d64f49976237fc601a5dec78395318e2cb13b43102

*/
